
# observe how spring boot starts by reading logs
# debug=true

#### spring data jpa:


 # https://stackoverflow.com/questions/34003412/spring-data-jpa-intelligence-not-working-in-intellij


 # Log SQL statements generated by Spring Data JPA
 # also refer: https://vladmihalcea.com/log-sql-spring-boot/

#_________________________________________________________________
 spring.jpa.show-sql=true
#_________________________________________________________________

 # tell spring-data-jpa how to initialize database
 # refer: https://stackoverflow.com/questions/42135114/how-does-spring-jpa-hibernate-ddl-auto-property-exactly-work-in-spring

 # update :
 #
 #          "Hey, hibernate look at my domain model (@Entity) and setup the entity in my database for me
 #           on application startup"
 #
 #           What happens when domain model is updated ( say column name is changed / data type changed) in code ?
 #
 #           the object model created based on the mappings (annotations or XML)
 #           is compared with the existing schema, and then Hibernate updates
 #           the schema according to the diff.
 #
 #           It never deletes the existing tables or columns even if they are
 #           no more required by the application, it only adds the new ones
 #
#_________________________________________________________________
   spring.jpa.hibernate.ddl-auto=update
#_________________________________________________________________

#### flyway:

 # sometimes you might want to use different set of credentials
 # for running migrations from what is used by application
 #
 # the main reason for this is that to run migrations you
 # may need elevated privileges :
 #
 #   spring.flyway.user
 #   spring.flyway.password


 # sometimes you work with multiple databases and you may need
 # a different migration script for each as the syntax for
 # each db vendor could be different
 #
 # by default:
 # spring.flyway.locations=classpath:/db/migration
 #
 # to support different vendors:
 # spring.flyway.locations=classpath:/db/migration/{vendor}
 #
 # ^^In org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.java has a
 #    private static class LocationResolver which resolves the location
 #    based on org.springframework.boot.jdbc.DatabaseDriver enum (ex: h2 for H2):
 #
 #  public String getId() { // inside DatabaseDriver enum
 #        return this.name().toLowerCase(Locale.ENGLISH);
 #   }
 #
 #  In the current project, the sample data inserted for h2 and postgresql
 #  have difference in syntax, CURRENT_TIMESTAMP() is a function in h2
 #  whereas it is just CURRENT_TIMESTAMP for postgresql

#_________________________________________________________________
spring.flyway.locations=classpath:/db/migration/{vendor}
#_________________________________________________________________

# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.external-config.files.multi-document

#---
spring.config.activate.on-profile=k8s # if SPRING_ACTIVE_PROFILE="k8s" apply set following properties
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:appdb}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}